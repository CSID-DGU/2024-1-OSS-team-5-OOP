{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@blockly/field-date/webpack/universalModuleDefinition","webpack://@blockly/field-date/external umd {\"root\":\"Blockly\",\"commonjs\":\"blockly/core\",\"commonjs2\":\"blockly/core\",\"amd\":\"blockly/core\"}","webpack://@blockly/field-date/webpack/bootstrap","webpack://@blockly/field-date/webpack/runtime/define property getters","webpack://@blockly/field-date/webpack/runtime/hasOwnProperty shorthand","webpack://@blockly/field-date/webpack/runtime/make namespace object","webpack://@blockly/field-date/./src/field_date.ts","webpack://@blockly/field-date/./src/utils.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"blockly/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"blockly/core\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"blockly/core\")) : factory(root[\"Blockly\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, (__WEBPACK_EXTERNAL_MODULE__573__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__573__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Plugin overview.\n */\nimport * as Blockly from 'blockly/core';\nimport {getLocaleDateString} from './utils';\n\n/**\n * Class for a date input field.\n */\nexport class FieldDate extends Blockly.FieldTextInput {\n  /**\n   * Serializable fields are saved by the XML renderer, non-serializable fields\n   * are not. Editable fields should also be serializable.\n   */\n  SERIALIZABLE = true;\n\n  /**\n   * Mouse cursor style when over the hotspot that initiates the editor.\n   */\n  CURSOR = 'text';\n\n  /**\n   * Class for a date input field. Derived from the Closure library date\n   * picker.\n   *\n   * @param value The initial value of the field. Should be in\n   *    'YYYY-MM-DD' format. Defaults to the current date.\n   * @param validator A function that is called to validate\n   *    changes to the field's value. Takes in a date string & returns a\n   *    validated date string ('YYYY-MM-DD' format), or null to abort the\n   *    change.\n   * @param config A map of options used to configure the field.\n   */\n  constructor(\n    value?: string,\n    validator?: FieldDateValidator,\n    config?: FieldDateConfig,\n  ) {\n    super(value, validator, config);\n  }\n\n  /**\n   * Constructs a FieldDate from a JSON arg object.\n   *\n   * @param options A JSON object with options (date).\n   * @returns The new field instance.\n   * @package\n   * @nocollapse\n   */\n  static fromJson(options: FieldDateFromJsonConfig): FieldDate {\n    const {date, ...fieldDateConfig} = options;\n    // `this` might be a subclass of FieldDate if that class doesn't\n    // override the static fromJson method.\n    return new this(date, undefined, fieldDateConfig);\n  }\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  /**\n   * Ensures that the input value is a valid date. Additionally, if the date\n   * string provided includes a time, the time will be removed and the date for\n   * relative to the user's timezone will be used.\n   *\n   * @param newValue The input value. Ex: '2023-04-28'\n   * @returns A valid date string, or null if invalid.\n   * @override\n   */\n  protected doClassValidation_(newValue?: string): string | null {\n    if (!newValue) return null;\n\n    const newDate = typeof newValue === 'string' ? new Date(newValue) : null;\n    if (!newDate || isNaN(newDate.getTime())) return null;\n\n    // NOTE: 'newValue' should be a valid date format here.\n    if (isISOFormat(newValue)) return newValue;\n\n    // Assume the time needs to be corrected.\n    return toLocalISOString(newDate);\n  }\n\n  /**\n   * Get the text to display on the block when the input hasn't spawned in.\n   *\n   * @returns The text to display on the block.\n   * @override\n   */\n  protected getText_(): string | null {\n    const value = this.getValue();\n    if (!value) return null;\n    // NOTE: There may be discrepancies between the text and the input based on\n    // browser. For example, 'en-US' would display the text '2/14/2020', then\n    // clicking in Safari on iOS would display 'Feb 14, 2020'.\n    return getLocaleDateString(value);\n  }\n\n  /**\n   * Renders the field. If the picker is shown make sure it has the current\n   * date selected.\n   */\n  protected render_() {\n    super.render_();\n  }\n\n  /**\n   * Shows the inline free-text editor on top of the text along with the date\n   * editor.\n   *\n   * @param e Optional mouse event that triggered the field to\n   *     open, or undefined if triggered programmatically.\n   * @override\n   */\n  protected showEditor_(e?: Event) {\n    // Pass in `true` for `quietInput` to disable modal inputs for the date\n    // block without setting `this.sourceBlock_.workspace.options.modalInputs`,\n    // which would impact the entire workspace.\n    super.showEditor_(e, true);\n\n    // Even though `quietInput` was set true, focus on the element.\n    this.htmlInput_?.focus({\n      preventScroll: true,\n    });\n    this.htmlInput_?.select();\n    this.showDropdown();\n  }\n\n  /**\n   * Updates the size of the field based on the text.\n   *\n   * @param margin margin to use when positioning the text element.\n   * @override\n   */\n  protected updateSize_(margin?: number) {\n    // Add margin so that the date input's datepicker icon doesn't clip with\n    // the text when sized for the date.\n    super.updateSize_((margin ?? 0) + 20);\n  }\n\n  /**\n   * Shows the datepicker.\n   */\n  private showDropdown(): void {\n    if (!this.htmlInput_) return;\n    Blockly.utils.dom.addClass(this.htmlInput_, 'blocklyDateInput');\n\n    // NOTE: HTMLInputElement.showPicker() is not available in earlier\n    // TypeScript versions (like 4.7.4), so casting to `any` to be compatible\n    // with dev scripts. Additionally, it's not available for date inputs for\n    // Safari. For browser compatibility of showPicker, see:\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    (this.htmlInput_ as any).showPicker();\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  }\n\n  /**\n   * Create the html input and set it to type date.\n   *\n   * @returns The newly created date input editor.\n   */\n  protected widgetCreate_(): HTMLInputElement {\n    // NOTE: field_input should return HTMLInputElement for this.\n    const htmlInput = super.widgetCreate_() as HTMLInputElement;\n    htmlInput.type = 'date';\n\n    return htmlInput;\n  }\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\n/**\n * NOTE: There are a few minor ways to tweak the datepicker CSS, though they're\n * not consistent across browsers.\n *\n * @see{@link https://developer.mozilla.org/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls#date_pickers}\n *\n * Below are a few ways this can be tweaked on *some* browsers:\n * Blockly.Css.register(`\n * ::-webkit-datetime-edit { }\n * ::-webkit-datetime-edit-fields-wrapper { }\n * ::-webkit-datetime-edit-text { }\n * ::-webkit-datetime-edit-month-field { }\n * ::-webkit-datetime-edit-day-field { }\n * ::-webkit-datetime-edit-year-field { }\n * ::-webkit-inner-spin-button { }\n * ::-webkit-calendar-picker-indicator { }\n * `);\n */\nif (Blockly.utils.userAgent.MAC) {\n  // NOTE: By default, 4 px padding total are added within the User Agent\n  // Shadow Content on Safari on MAC. Remove the padding so the inner input\n  // matches the outer input's height and, by extension, the height of the text\n  // node.\n  Blockly.Css.register(`\ninput.blocklyDateInput::-webkit-datetime-edit,\ninput.blocklyDateInput::-webkit-datetime-edit-month-field,\ninput.blocklyDateInput::-webkit-datetime-edit-day-field,\ninput.blocklyDateInput::-webkit-datetime-edit-year-field {\n  padding: 0;\n}\n`);\n}\n\nBlockly.fieldRegistry.register('field_date', FieldDate);\n\n/**\n * A config object for defining a field date.\n */\nexport interface FieldDateConfig extends Blockly.FieldTextInputConfig {\n  // NOTE: spellcheck is defined for FieldInput though irrelevant for FieldDate.\n  spellcheck?: never;\n}\n\n/**\n * Options used to define a field date from JSON.\n */\nexport interface FieldDateFromJsonConfig extends FieldDateConfig {\n  date?: string;\n}\n\nexport type FieldDateValidator = Blockly.FieldTextInputValidator;\n\n/**\n * Validate a string value to see if it matches the format.\n *\n * @param value The value to validate the format for.\n * @returns true if the value is in 'yyyy-mm-dd' format.\n * @example\n * isISOFormat('2000-02-20T00:00:00Z') === false\n * isISOFormat('2000-02-20') === true\n */\nexport function isISOFormat(value: string): boolean {\n  const valueMatch = value.match(/\\d\\d\\d\\d-\\d\\d-\\d\\d/);\n  // If it matches ####-##-## and is the same as its input string,\n  // then assume this is the right format\n  return valueMatch !== null && valueMatch[0] === valueMatch.input;\n}\n\n/**\n * Convert the date to ISO format for the current timezone.\n *\n * @param date The date to convert to an ISO string.\n * @returns The string in 'yyyy-mm-dd' format, though for the current timezone.\n * Ex: new Date('2000-02-20')\n */\nexport function toLocalISOString(date: Date) {\n  // NOTE: If the date is Feb 20, 2000 at 23:00 for GMT-6, it would be\n  // '2000-02-21' at GMT+0, which is what `date.toISOString()` would return.\n  // For a user whose timezone is GMT-6, this should return '2000-02-20'.\n  // For a user whose timezone is GMT-5, that date should return '2000-02-21'.\n  return date\n    .toLocaleDateString('en-US')\n    .replace(/(\\d+)\\/(\\d+)\\/(\\d+)/, '$3-$1-$2')\n    .replace(/-(\\d)(?!\\d)/g, '-0$1');\n}\n\n// NOTE: Set default here instead of in class so it's available at Field.\nFieldDate.prototype.DEFAULT_VALUE = toLocalISOString(new Date());\n","/**\n * Get the string formatted locally to the user.\n *\n * @param dateString A string in the format 'yyyy-mm-dd'\n * @returns the locale date string for the date.\n */\nexport function getLocaleDateString(dateString: string): string {\n  // NOTE: `date.toLocaleDateString()` will be the day before for western dates\n  // due to an unspecified time & timezone assuming midnight at GMT+0.\n  const date = new Date(dateString);\n\n  // NOTE: This format varies per region.\n  // Ex: \"5/12/2023\", \"12/05/2023\", \"12.5.2023\", \"2023/5/12\", \"१२/५/२०२३\"\n  const language = navigator.language ?? 'en-US';\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options\n  return new Intl.DateTimeFormat(language, {\n    // Print the date for GMT+0 since the date object assumes midnight at GMT+0.\n    timeZone: 'UTC',\n  }).format(date);\n}\n"],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE__573__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","FieldDate","constructor","validator","config","super","SERIALIZABLE","CURSOR","static","options","date","doClassValidation_","newValue","newDate","Date","isNaN","getTime","isISOFormat","toLocalISOString","getText_","getValue","dateString","language","navigator","Intl","DateTimeFormat","timeZone","format","getLocaleDateString","render_","showEditor_","e","htmlInput_","focus","preventScroll","select","showDropdown","updateSize_","margin","showPicker","widgetCreate_","htmlInput","type","valueMatch","match","input","toLocaleDateString","replace","DEFAULT_VALUE"],"sourceRoot":""}